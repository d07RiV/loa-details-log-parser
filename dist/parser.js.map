{"version":3,"file":"parser.js","sources":["../src/util.ts","../src/constants.ts","../src/log-lines.ts","../src/parser.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\n  if (typeof intString === \"number\") {\n    if (isNaN(intString)) return defaultValue;\n    return intString;\n  }\n\n  let intNum: number;\n\n  try {\n    intNum = parseInt(intString, radix);\n    if (isNaN(intNum)) intNum = defaultValue;\n  } catch {\n    intNum = defaultValue;\n  }\n\n  return intNum;\n}\n","interface HealingSkills {\n  [key: string]: HealingSkillDetails;\n}\ninterface HealingSkillDetails {\n  duration: number;\n}\nexport const healingSkills: HealingSkills = {\n  \"Serenade of Salvation\": {\n    duration: 3\n  },\n  \"Holy Aura\": {\n    duration: 16 * 1000\n  },\n  \"Holy Protection\": {\n    duration: 7 * 1000\n  },\n  Demonize: {\n    duration: 1.5 * 1000\n  }\n};\n\nexport enum HitFlag {\n  HIT_FLAG_NORMAL = 0,\n  HIT_FLAG_CRITICAL = 1,\n  HIT_FLAG_MISS = 2,\n  HIT_FLAG_INVINCIBLE = 3,\n  HIT_FLAG_DOT = 4,\n  HIT_FLAG_IMMUNE = 5,\n  HIT_FLAG_IMMUNE_SILENCED = 6,\n  HIT_FLAG_FONT_SILENCED = 7,\n  HIT_FLAG_DOT_CRITICAL = 8,\n  HIT_FLAG_DODGE = 9,\n  HIT_FLAG_REFLECT = 10,\n  HIT_FLAG_DAMAGE_SHARE = 11,\n  HIT_FLAG_DODGE_HIT = 12,\n  HIT_FLAG_MAX = 13,\n  HIT_OPTION_BACK_ATTACK = 1 << (0 + 4),\n  HIT_OPTION_FRONTAL_ATTACK = 1 << (1 + 4),\n  HIT_OPTION_FLANK_ATTACK = 1 << (2 + 4)\n}\n","import { tryParseInt } from \"./util.js\";\n\nclass LogLine {\n  lineSplit: string[];\n  timestamp: Date;\n\n  constructor(lineSplit: string[]) {\n    this.lineSplit = lineSplit;\n    this.timestamp = new Date(this.lineSplit[1]);\n  }\n}\n\n// logId = 0\nexport class LogMessage extends LogLine {\n  message: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.message = this.lineSplit[2];\n  }\n}\n\n// logId = 1\nexport class LogInitEnv extends LogLine {\n  playerId: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.playerId = lineSplit[2];\n  }\n}\n\n// logId = 2\nexport class LogPhaseTransition extends LogLine {\n  phaseCode: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.phaseCode = tryParseInt(lineSplit[2]);\n  }\n}\n\n// logId = 3\nexport class LogNewPc extends LogLine {\n  id: string;\n  name: string;\n  classId: number;\n  class: string;\n  gearScore: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.classId = tryParseInt(lineSplit[4]);\n    this.class = lineSplit[5] || \"UnknownClass\";\n    /* this.level = tryParseInt(lineSplit[6]); */\n    this.gearScore = lineSplit[7];\n    this.currentHp = tryParseInt(lineSplit[8]);\n    this.maxHp = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 4\nexport class LogNewNpc extends LogLine {\n  id: string;\n  name: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    //this.npcId = tryParseInt(lineSplit[3]);\n    this.name = lineSplit[4] || \"Unknown Entity\";\n    this.currentHp = tryParseInt(lineSplit[5]);\n    this.maxHp = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 5\nexport class LogDeath extends LogLine {\n  id: string;\n  name: string;\n  killerId: string;\n  killerName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.killerId = lineSplit[4];\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\n  }\n}\n\n// logId = 6\nexport class LogSkillStart extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n  }\n}\n\n// logId = 7\nexport class LogSkillStage extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n  skillStage: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillStage = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 8\nexport class LogDamage extends LogLine {\n  id: string;\n  name: string;\n  skillId: number;\n  skillName: string;\n  skillEffectId: number;\n  skillEffect: string;\n  targetId: string;\n  targetName: string;\n  damage: number;\n  damageModifier: number;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = tryParseInt(lineSplit[4]);\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillEffectId = tryParseInt(lineSplit[6]);\n    this.skillEffect = lineSplit[7];\n    this.targetId = lineSplit[8];\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\n    this.damage = tryParseInt(lineSplit[10]);\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\n    this.currentHp = tryParseInt(lineSplit[12]);\n    this.maxHp = tryParseInt(lineSplit[13]);\n  }\n}\n\n// logId = 9\nexport class LogHeal extends LogLine {\n  id: string;\n  name: string;\n  healAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.healAmount = tryParseInt(lineSplit[4]);\n    //this.currentHp = tryParseInt(lineSplit[5]);\n  }\n}\n\n// logId = 10\nexport class LogBuff extends LogLine {\n  id: string;\n  name: string;\n  buffId: string;\n  buffName: string;\n  isNew: boolean;\n  sourceId: string;\n  sourceName: string;\n  shieldAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.buffId = lineSplit[4];\n    this.buffName = lineSplit[5];\n    this.isNew = lineSplit[6] == \"1\";\n    this.sourceId = lineSplit[7];\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\n    this.shieldAmount = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 11\nexport class LogCounterattack extends LogLine {\n  id: string;\n  name: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    /* this.targetId = lineSplit[4];\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\n  }\n}\n","import cloneDeep from \"lodash/cloneDeep.js\";\nimport EventEmitter from \"events\";\n\nimport * as LogLines from \"./log-lines.js\";\nimport { tryParseInt } from \"./util.js\";\nimport { healingSkills, HitFlag } from \"./constants.js\";\n\ninterface Game {\n  startedOn: number;\n  lastCombatPacket: number;\n  fightStartedOn: number;\n  entities: { [name: string]: Entity };\n  damageStatistics: {\n    totalDamageDealt: number;\n    topDamageDealt: number;\n    totalDamageTaken: number;\n    topDamageTaken: number;\n    totalHealingDone: number;\n    topHealingDone: number;\n    totalShieldDone: number;\n    topShieldDone: number;\n    targetMaximumHealth: number;\n    targetCurrentHealth: number;\n  };\n}\ninterface HealSource {\n  source: string;\n  expires: number;\n}\n\ninterface Entity {\n  lastUpdate: number;\n  id: string;\n  name: string;\n  class: string;\n  isPlayer: boolean;\n  isDead: boolean;\n  deathTime: number;\n  gearScore: string;\n  currentHp: number;\n  maxHp: number;\n  damageDealt: number;\n  healingDone: number;\n  shieldDone: number;\n  damageTaken: number;\n  skills: { [name: string]: EntitySkills };\n  hits: Hits;\n}\ninterface EntitySkills {\n  name: string;\n  totalDamage: number;\n  maxDamage: number;\n  hits: Hits;\n}\nfunction createEntitySkill(): EntitySkills {\n  const newEntitySkill: EntitySkills = {\n    name: \"\",\n    totalDamage: 0,\n    maxDamage: 0,\n    hits: {\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntitySkill;\n}\n\ninterface Hits {\n  total: number;\n  crit: number;\n  backAttack: number;\n  frontAttack: number;\n  counter: number;\n}\nfunction createEntity(): Entity {\n  const newEntity: Entity = {\n    lastUpdate: 0,\n    id: \"\",\n    name: \"\",\n    class: \"\",\n    isPlayer: false,\n    isDead: false,\n    deathTime: 0,\n    gearScore: \"\",\n    currentHp: 0,\n    maxHp: 0,\n    damageDealt: 0,\n    healingDone: 0,\n    shieldDone: 0,\n    damageTaken: 0,\n    skills: {},\n    hits: {\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntity;\n}\n\nexport class LogParser {\n  eventEmitter: EventEmitter;\n  resetTimer: ReturnType<typeof setTimeout>;\n\n  debugLines: boolean;\n  isLive: boolean;\n  dontResetOnZoneChange: boolean;\n  resetAfterPhaseTransition: boolean;\n  splitOnPhaseTransition: boolean;\n  removeOverkillDamage: boolean;\n\n  phaseTransitionResetRequest: boolean;\n  phaseTransitionResetRequestTime: number;\n\n  game: Game;\n  encounters: Game[];\n  healSources: HealSource[];\n\n  constructor(isLive = false) {\n    this.eventEmitter = new EventEmitter();\n    this.resetTimer = null;\n\n    this.debugLines = false;\n    this.isLive = isLive;\n    this.dontResetOnZoneChange = false;\n    this.resetAfterPhaseTransition = false;\n    this.splitOnPhaseTransition = false;\n    this.removeOverkillDamage = true;\n\n    this.phaseTransitionResetRequest = false;\n    this.phaseTransitionResetRequestTime = 0;\n\n    this.resetState();\n    this.encounters = [];\n\n    if (this.isLive) {\n      setInterval(this.broadcastStateChange.bind(this), 100);\n    }\n  }\n\n  resetState() {\n    if (this.debugLines)\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: \"Resetting state\"\n      });\n\n    const curTime = +new Date();\n\n    this.game = {\n      startedOn: curTime,\n      lastCombatPacket: curTime,\n      fightStartedOn: 0,\n      entities: {},\n      damageStatistics: {\n        totalDamageDealt: 0,\n        topDamageDealt: 0,\n        totalDamageTaken: 0,\n        topDamageTaken: 0,\n        totalHealingDone: 0,\n        topHealingDone: 0,\n        totalShieldDone: 0,\n        topShieldDone: 0,\n        targetMaximumHealth: 0,\n        targetCurrentHealth: 0,\n      }\n    };\n\n    this.healSources = [];\n\n    this.eventEmitter.emit(\"reset-state\");\n  }\n  softReset() {\n    this.resetTimer = null;\n    const entitiesCopy = cloneDeep(this.game.entities);\n    this.resetState();\n    for (const entity of Object.keys(entitiesCopy)) {\n      // don't keep entity if it hasn't been updated in 10 minutes\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\n        continue;\n\n      this.updateEntity(entitiesCopy[entity].name, {\n        name: entitiesCopy[entity].name,\n        class: entitiesCopy[entity].class,\n        isPlayer: entitiesCopy[entity].isPlayer,\n        gearScore: entitiesCopy[entity].gearScore,\n        maxHp: entitiesCopy[entity].maxHp,\n        currentHp: entitiesCopy[entity].currentHp\n      });\n    }\n  }\n  cancelReset() {\n    if (this.resetTimer) clearTimeout(this.resetTimer);\n    this.resetTimer = null;\n  }\n  splitEncounter() {\n    const curState = cloneDeep(this.game);\n    if (\n      curState.fightStartedOn != 0 && // no combat packets\n      (curState.damageStatistics.totalDamageDealt != 0 ||\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\n    )\n      this.encounters.push(curState);\n    this.resetState();\n  }\n\n  broadcastStateChange() {\n    this.eventEmitter.emit(\"state-change\", this.game);\n  }\n\n  parseLogLine(line: string) {\n    if (!line) return;\n\n    const lineSplit = line.trim().split(\"|\");\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\n\n    const logType = tryParseInt(lineSplit[0]);\n\n    try {\n      switch (logType) {\n        case 0:\n          this.onMessage(lineSplit);\n          break;\n        case 1:\n          this.onInitEnv(/* lineSplit */);\n          break;\n        case 2:\n          this.onPhaseTransition(lineSplit);\n          break;\n        case 3:\n          this.onNewPc(lineSplit);\n          break;\n        case 4:\n          this.onNewNpc(lineSplit);\n          break;\n        case 5:\n          this.onDeath(lineSplit);\n          break;\n        case 6:\n          this.onSkillStart(lineSplit);\n          break;\n        case 7:\n          this.onSkillStage(lineSplit);\n          break;\n        case 8:\n          this.onDamage(lineSplit);\n          break;\n        case 9:\n          this.onHeal(lineSplit);\n          break;\n        case 10:\n          this.onBuff(lineSplit);\n          break;\n        case 11:\n          this.onCounterattack(lineSplit);\n          break;\n      }\n    } catch (e) {\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\n    }\n  }\n\n  updateEntity(entityName: string, values) {\n    const updateTime = { lastUpdate: +new Date() };\n    if (!(entityName in this.game.entities)) {\n      this.game.entities[entityName] = {\n        ...createEntity(),\n        ...values,\n        ...updateTime\n      };\n    } else {\n      this.game.entities[entityName] = {\n        ...this.game.entities[entityName],\n        ...values,\n        ...updateTime\n      };\n    }\n  }\n\n  // logId = 0\n  onMessage(lineSplit: string[]) {\n    const logLine = new LogLines.LogMessage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onMessage: ${logLine.message}`\n      });\n    }\n\n    if (!logLine.message.startsWith(\"Arguments:\")) {\n      this.eventEmitter.emit(\"message\", logLine.message);\n    }\n  }\n\n  // logId = 1\n  onInitEnv(/* lineSplit: string[] */) {\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onInitEnv`\n      });\n    }\n\n    if (this.isLive) {\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\n        if (this.debugLines) {\n          this.eventEmitter.emit(\"log\", {\n            type: \"debug\",\n            message: `Setting a reset timer`\n          });\n        }\n\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\n        this.eventEmitter.emit(\"message\", \"new-zone\");\n      }\n    } else {\n      this.splitEncounter();\n      this.eventEmitter.emit(\"message\", \"new-zone\");\n    }\n  }\n\n  // logId = 2\n  onPhaseTransition(lineSplit: string[]) {\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onPhaseTransition: ${logLine.phaseCode}`\n      });\n    }\n\n    if (this.isLive) {\n      this.eventEmitter.emit(\n        \"message\",\n        `phase-transition-${logLine.phaseCode}`\n      );\n\n      if (this.resetAfterPhaseTransition) {\n        this.phaseTransitionResetRequest = true;\n        this.phaseTransitionResetRequestTime = +new Date();\n      }\n    }\n\n    if (!this.isLive && this.splitOnPhaseTransition) {\n      this.splitEncounter();\n    }\n  }\n\n  // logId = 3\n  onNewPc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewPc(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      class: logLine.class,\n      isPlayer: true,\n      ...(logLine.gearScore &&\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 4\n  onNewNpc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewNpc(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isPlayer: false,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 5\n  onDeath(lineSplit: string[]) {\n    const logLine = new LogLines.LogDeath(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: true,\n      deathTime: logLine.timestamp.getTime()\n    });\n  }\n\n  // logId = 6\n  onSkillStart(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStart(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\n      });\n    }\n\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\n      this.healSources.push({\n        source: logLine.name,\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: false\n    });\n  }\n\n  // logId = 7\n  onSkillStage(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\n      });\n    }\n  }\n\n  // logId = 8\n  onDamage(lineSplit: string[]) {\n    if (lineSplit.length < 13) return;\n    const logLine = new LogLines.LogDamage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    if (\n      this.phaseTransitionResetRequest &&\n      this.phaseTransitionResetRequestTime > 0 &&\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\n    ) {\n      this.softReset();\n      this.phaseTransitionResetRequest = false;\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    this.updateEntity(logLine.targetName, {\n      name: logLine.targetName,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n\n    const damageOwner = this.game.entities[logLine.name];\n    const damageTarget = this.game.entities[logLine.targetName];\n\n    if (\n      !damageTarget.isPlayer &&\n      this.removeOverkillDamage &&\n      logLine.currentHp < 0\n    ) {\n      logLine.damage = logLine.damage + logLine.currentHp;\n    }\n\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\n        ...createEntitySkill(),\n        ...{ name: logLine.skillName }\n      };\n    }\n\n    // TODO: Not sure if this is fixed in the logger\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\n\n    // Remove 'sync' bleeds on G1 Valtan\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\n\n    const isCrit =\n      (logLine.damageModifier &\n        (HitFlag.HIT_FLAG_CRITICAL | HitFlag.HIT_FLAG_DOT_CRITICAL)) >\n      0;\n    const isBackAttack =\n      (logLine.damageModifier & HitFlag.HIT_OPTION_BACK_ATTACK) > 0;\n    const isFrontAttack =\n      (logLine.damageModifier & HitFlag.HIT_OPTION_FRONTAL_ATTACK) > 0;\n\n    const critCount = isCrit ? 1 : 0;\n    const backAttackCount = isBackAttack ? 1 : 0;\n    const frontAttackCount = isFrontAttack ? 1 : 0;\n\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\n      logLine.damage;\n    if (\n      logLine.damage >\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\n    )\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\n        logLine.damage;\n\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\n\n    if (logLine.skillName !== \"Bleed\") {\n      this.game.entities[logLine.name].hits.total += 1;\n      this.game.entities[logLine.name].hits.crit += critCount;\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\n\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.total += 1;\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\n        critCount;\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.backAttack += backAttackCount;\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.frontAttack += frontAttackCount;\n    }\n\n    if (damageOwner.isPlayer) {\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\n      this.game.damageStatistics.topDamageDealt = Math.max(\n        this.game.damageStatistics.topDamageDealt,\n        damageOwner.damageDealt\n      );\n      this.game.damageStatistics.targetMaximumHealth = logLine.maxHp;\n      this.game.damageStatistics.targetCurrentHealth = logLine.currentHp;\n    }\n\n    if (damageTarget.isPlayer) {\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\n      this.game.damageStatistics.topDamageTaken = Math.max(\n        this.game.damageStatistics.topDamageTaken,\n        damageTarget.damageTaken\n      );\n    }\n\n    if (this.game.fightStartedOn === 0)\n      this.game.fightStartedOn = +logLine.timestamp;\n    this.game.lastCombatPacket = +logLine.timestamp;\n  }\n\n  // logId = 9\n  onHeal(lineSplit: string[]) {\n    const logLine = new LogLines.LogHeal(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\n      });\n    }\n\n    let sourceName = \"\";\n    for (const source of this.healSources) {\n      if (source.expires >= +logLine.timestamp) {\n        sourceName = source.source;\n        break;\n      }\n    }\n    if (!sourceName) return;\n\n    this.updateEntity(sourceName, {\n      name: sourceName\n    });\n\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\n\n    if (this.game.entities[sourceName].isPlayer) {\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\n      this.game.damageStatistics.topHealingDone = Math.max(\n        this.game.damageStatistics.topHealingDone,\n        this.game.entities[sourceName].healingDone\n      );\n    }\n  }\n\n  // logId = 10\n  onBuff(lineSplit: string[]) {\n    const logLine = new LogLines.LogBuff(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\n      });\n    }\n\n    if (logLine.shieldAmount && logLine.isNew) {\n      this.updateEntity(logLine.name, {\n        name: logLine.name\n      });\n\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\n\n      if (this.game.entities[logLine.name].isPlayer) {\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\n        this.game.damageStatistics.topShieldDone = Math.max(\n          this.game.damageStatistics.topShieldDone,\n          this.game.entities[logLine.name].shieldDone\n        );\n      }\n    }\n  }\n\n  // logId = 11\n  onCounterattack(lineSplit: string[]) {\n    const logLine = new LogLines.LogCounterattack(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    // TODO: Add skill name from logger\n    this.game.entities[logLine.name].hits.counter += 1;\n  }\n}\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","HitFlag","lineSplit","this","timestamp","Date","LogMessage","_this","_LogLine","call","message","LogLine","_LogLine3","LogPhaseTransition","_this3","phaseCode","_inheritsLoose","_LogLine4","LogNewPc","_this4","id","name","classId","gearScore","currentHp","maxHp","LogNewNpc","_LogLine5","_this5","LogDeath","_LogLine6","_this6","killerId","killerName","LogSkillStart","_this7","_LogLine7","skillId","skillName","LogSkillStage","_LogLine8","_this8","skillStage","_LogLine9","LogDamage","_this9","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","_this10","_LogLine10","healAmount","LogBuff","_LogLine11","_this11","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","_this12","_LogLine12","healingSkills","duration","Demonize","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","EventEmitter","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","targetMaximumHealth","targetCurrentHealth","softReset","cloneDeep","_i","_Object$keys","Object","keys","entitiesCopy","length","entity","lastUpdate","updateEntity","class","isPlayer","_proto","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","updateTime","logLine","startsWith","setTimeout","LogLines","LogLines.LogNewPc","getTime","includes","source","expires","damageOwner","damageTarget","totalDamage","maxDamage","critCount","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","backAttackCount","HIT_OPTION_BACK_ATTACK","HIT_OPTION_FRONTAL_ATTACK","frontAttackCount","Math","max","_step","_iterator","_createForOfIteratorHelperLoose","done","value","LogLines.LogBuff","LogLines.LogCounterattack","LogParser"],"mappings":"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"}