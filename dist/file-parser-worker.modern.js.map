{"version":3,"file":"file-parser-worker.modern.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\n  if (typeof intString === \"number\") {\n    if (isNaN(intString)) return defaultValue;\n    return intString;\n  }\n\n  let intNum: number;\n\n  try {\n    intNum = parseInt(intString, radix);\n    if (isNaN(intNum)) intNum = defaultValue;\n  } catch {\n    intNum = defaultValue;\n  }\n\n  return intNum;\n}\n","import { tryParseInt } from \"./util.js\";\n\nclass LogLine {\n  lineSplit: string[];\n  timestamp: Date;\n\n  constructor(lineSplit: string[]) {\n    this.lineSplit = lineSplit;\n    this.timestamp = new Date(this.lineSplit[1]);\n  }\n}\n\n// logId = 0\nexport class LogMessage extends LogLine {\n  message: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.message = this.lineSplit[2];\n  }\n}\n\n// logId = 1\nexport class LogInitEnv extends LogLine {\n  playerId: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.playerId = lineSplit[2];\n  }\n}\n\n// logId = 2\nexport class LogPhaseTransition extends LogLine {\n  phaseCode: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.phaseCode = tryParseInt(lineSplit[2]);\n  }\n}\n\n// logId = 3\nexport class LogNewPc extends LogLine {\n  id: string;\n  name: string;\n  classId: number;\n  class: string;\n  gearScore: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.classId = tryParseInt(lineSplit[4]);\n    this.class = lineSplit[5] || \"UnknownClass\";\n    /* this.level = tryParseInt(lineSplit[6]); */\n    this.gearScore = lineSplit[7];\n    this.currentHp = tryParseInt(lineSplit[8]);\n    this.maxHp = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 4\nexport class LogNewNpc extends LogLine {\n  id: string;\n  name: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    //this.npcId = tryParseInt(lineSplit[3]);\n    this.name = lineSplit[4] || \"Unknown Entity\";\n    this.currentHp = tryParseInt(lineSplit[5]);\n    this.maxHp = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 5\nexport class LogDeath extends LogLine {\n  id: string;\n  name: string;\n  killerId: string;\n  killerName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.killerId = lineSplit[4];\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\n  }\n}\n\n// logId = 6\nexport class LogSkillStart extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n  }\n}\n\n// logId = 7\nexport class LogSkillStage extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n  skillStage: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillStage = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 8\nexport class LogDamage extends LogLine {\n  id: string;\n  name: string;\n  skillId: number;\n  skillName: string;\n  skillEffectId: number;\n  skillEffect: string;\n  targetId: string;\n  targetName: string;\n  damage: number;\n  damageModifier: number;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = tryParseInt(lineSplit[4]);\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillEffectId = tryParseInt(lineSplit[6]);\n    this.skillEffect = lineSplit[7];\n    this.targetId = lineSplit[8];\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\n    this.damage = tryParseInt(lineSplit[10]);\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\n    this.currentHp = tryParseInt(lineSplit[12]);\n    this.maxHp = tryParseInt(lineSplit[13]);\n  }\n}\n\n// logId = 9\nexport class LogHeal extends LogLine {\n  id: string;\n  name: string;\n  healAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.healAmount = tryParseInt(lineSplit[4]);\n    //this.currentHp = tryParseInt(lineSplit[5]);\n  }\n}\n\n// logId = 10\nexport class LogBuff extends LogLine {\n  id: string;\n  name: string;\n  buffId: string;\n  buffName: string;\n  isNew: boolean;\n  sourceId: string;\n  sourceName: string;\n  shieldAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.buffId = lineSplit[4];\n    this.buffName = lineSplit[5];\n    this.isNew = lineSplit[6] == \"1\";\n    this.sourceId = lineSplit[7];\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\n    this.shieldAmount = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 11\nexport class LogCounterattack extends LogLine {\n  id: string;\n  name: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    /* this.targetId = lineSplit[4];\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\n  }\n}\n","interface HealingSkills {\n  [key: string]: HealingSkillDetails;\n}\ninterface HealingSkillDetails {\n  duration: number;\n}\nexport const healingSkills: HealingSkills = {\n  \"Serenade of Salvation\": {\n    duration: 3\n  },\n  \"Holy Aura\": {\n    duration: 16 * 1000\n  },\n  \"Holy Protection\": {\n    duration: 7 * 1000\n  },\n  Demonize: {\n    duration: 1.5 * 1000\n  }\n};\n\nexport enum HitFlag {\n  HIT_FLAG_NORMAL = 0,\n  HIT_FLAG_CRITICAL = 1,\n  HIT_FLAG_MISS = 2,\n  HIT_FLAG_INVINCIBLE = 3,\n  HIT_FLAG_DOT = 4,\n  HIT_FLAG_IMMUNE = 5,\n  HIT_FLAG_IMMUNE_SILENCED = 6,\n  HIT_FLAG_FONT_SILENCED = 7,\n  HIT_FLAG_DOT_CRITICAL = 8,\n  HIT_FLAG_DODGE = 9,\n  HIT_FLAG_REFLECT = 10,\n  HIT_FLAG_DAMAGE_SHARE = 11,\n  HIT_FLAG_DODGE_HIT = 12,\n  HIT_FLAG_MAX = 13,\n  HIT_OPTION_BACK_ATTACK = 1 << (0 + 4),\n  HIT_OPTION_FRONTAL_ATTACK = 1 << (1 + 4),\n  HIT_OPTION_FLANK_ATTACK = 1 << (2 + 4)\n}\n","import cloneDeep from \"lodash/cloneDeep.js\";\nimport EventEmitter from \"events\";\n\nimport * as LogLines from \"./log-lines.js\";\nimport { tryParseInt } from \"./util.js\";\nimport { healingSkills, HitFlag } from \"./constants.js\";\n\ninterface Game {\n  startedOn: number;\n  lastCombatPacket: number;\n  fightStartedOn: number;\n  entities: { [name: string]: Entity };\n  damageStatistics: {\n    totalDamageDealt: number;\n    topDamageDealt: number;\n    totalDamageTaken: number;\n    topDamageTaken: number;\n    totalHealingDone: number;\n    topHealingDone: number;\n    totalShieldDone: number;\n    topShieldDone: number;\n    targetMaximumHealth: number;\n    targetCurrentHealth: number;\n  };\n}\ninterface HealSource {\n  source: string;\n  expires: number;\n}\n\ninterface Entity {\n  lastUpdate: number;\n  id: string;\n  name: string;\n  class: string;\n  isPlayer: boolean;\n  isDead: boolean;\n  deathTime: number;\n  gearScore: string;\n  currentHp: number;\n  maxHp: number;\n  damageDealt: number;\n  healingDone: number;\n  shieldDone: number;\n  damageTaken: number;\n  skills: { [name: string]: EntitySkills };\n  hits: Hits;\n}\ninterface EntitySkills {\n  name: string;\n  totalDamage: number;\n  maxDamage: number;\n  hits: Hits;\n}\nfunction createEntitySkill(): EntitySkills {\n  const newEntitySkill: EntitySkills = {\n    name: \"\",\n    totalDamage: 0,\n    maxDamage: 0,\n    hits: {\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntitySkill;\n}\n\ninterface Hits {\n  total: number;\n  crit: number;\n  backAttack: number;\n  frontAttack: number;\n  counter: number;\n}\nfunction createEntity(): Entity {\n  const newEntity: Entity = {\n    lastUpdate: 0,\n    id: \"\",\n    name: \"\",\n    class: \"\",\n    isPlayer: false,\n    isDead: false,\n    deathTime: 0,\n    gearScore: \"\",\n    currentHp: 0,\n    maxHp: 0,\n    damageDealt: 0,\n    healingDone: 0,\n    shieldDone: 0,\n    damageTaken: 0,\n    skills: {},\n    hits: {\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntity;\n}\n\nexport class LogParser {\n  eventEmitter: EventEmitter;\n  resetTimer: ReturnType<typeof setTimeout>;\n\n  debugLines: boolean;\n  isLive: boolean;\n  dontResetOnZoneChange: boolean;\n  resetAfterPhaseTransition: boolean;\n  splitOnPhaseTransition: boolean;\n  removeOverkillDamage: boolean;\n\n  phaseTransitionResetRequest: boolean;\n  phaseTransitionResetRequestTime: number;\n\n  game: Game;\n  encounters: Game[];\n  healSources: HealSource[];\n\n  constructor(isLive = false) {\n    this.eventEmitter = new EventEmitter();\n    this.resetTimer = null;\n\n    this.debugLines = false;\n    this.isLive = isLive;\n    this.dontResetOnZoneChange = false;\n    this.resetAfterPhaseTransition = false;\n    this.splitOnPhaseTransition = false;\n    this.removeOverkillDamage = true;\n\n    this.phaseTransitionResetRequest = false;\n    this.phaseTransitionResetRequestTime = 0;\n\n    this.resetState();\n    this.encounters = [];\n\n    if (this.isLive) {\n      setInterval(this.broadcastStateChange.bind(this), 100);\n    }\n  }\n\n  resetState() {\n    if (this.debugLines)\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: \"Resetting state\"\n      });\n\n    const curTime = +new Date();\n\n    this.game = {\n      startedOn: curTime,\n      lastCombatPacket: curTime,\n      fightStartedOn: 0,\n      entities: {},\n      damageStatistics: {\n        totalDamageDealt: 0,\n        topDamageDealt: 0,\n        totalDamageTaken: 0,\n        topDamageTaken: 0,\n        totalHealingDone: 0,\n        topHealingDone: 0,\n        totalShieldDone: 0,\n        topShieldDone: 0,\n        targetMaximumHealth: 0,\n        targetCurrentHealth: 0,\n      }\n    };\n\n    this.healSources = [];\n\n    this.eventEmitter.emit(\"reset-state\");\n  }\n  softReset() {\n    this.resetTimer = null;\n    const entitiesCopy = cloneDeep(this.game.entities);\n    this.resetState();\n    for (const entity of Object.keys(entitiesCopy)) {\n      // don't keep entity if it hasn't been updated in 10 minutes\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\n        continue;\n\n      this.updateEntity(entitiesCopy[entity].name, {\n        name: entitiesCopy[entity].name,\n        class: entitiesCopy[entity].class,\n        isPlayer: entitiesCopy[entity].isPlayer,\n        gearScore: entitiesCopy[entity].gearScore,\n        maxHp: entitiesCopy[entity].maxHp,\n        currentHp: entitiesCopy[entity].currentHp\n      });\n    }\n  }\n  cancelReset() {\n    if (this.resetTimer) clearTimeout(this.resetTimer);\n    this.resetTimer = null;\n  }\n  splitEncounter() {\n    const curState = cloneDeep(this.game);\n    if (\n      curState.fightStartedOn != 0 && // no combat packets\n      (curState.damageStatistics.totalDamageDealt != 0 ||\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\n    )\n      this.encounters.push(curState);\n    this.resetState();\n  }\n\n  broadcastStateChange() {\n    this.eventEmitter.emit(\"state-change\", this.game);\n  }\n\n  parseLogLine(line: string) {\n    if (!line) return;\n\n    const lineSplit = line.trim().split(\"|\");\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\n\n    const logType = tryParseInt(lineSplit[0]);\n\n    try {\n      switch (logType) {\n        case 0:\n          this.onMessage(lineSplit);\n          break;\n        case 1:\n          this.onInitEnv(/* lineSplit */);\n          break;\n        case 2:\n          this.onPhaseTransition(lineSplit);\n          break;\n        case 3:\n          this.onNewPc(lineSplit);\n          break;\n        case 4:\n          this.onNewNpc(lineSplit);\n          break;\n        case 5:\n          this.onDeath(lineSplit);\n          break;\n        case 6:\n          this.onSkillStart(lineSplit);\n          break;\n        case 7:\n          this.onSkillStage(lineSplit);\n          break;\n        case 8:\n          this.onDamage(lineSplit);\n          break;\n        case 9:\n          this.onHeal(lineSplit);\n          break;\n        case 10:\n          this.onBuff(lineSplit);\n          break;\n        case 11:\n          this.onCounterattack(lineSplit);\n          break;\n      }\n    } catch (e) {\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\n    }\n  }\n\n  updateEntity(entityName: string, values) {\n    const updateTime = { lastUpdate: +new Date() };\n    if (!(entityName in this.game.entities)) {\n      this.game.entities[entityName] = {\n        ...createEntity(),\n        ...values,\n        ...updateTime\n      };\n    } else {\n      this.game.entities[entityName] = {\n        ...this.game.entities[entityName],\n        ...values,\n        ...updateTime\n      };\n    }\n  }\n\n  // logId = 0\n  onMessage(lineSplit: string[]) {\n    const logLine = new LogLines.LogMessage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onMessage: ${logLine.message}`\n      });\n    }\n\n    if (!logLine.message.startsWith(\"Arguments:\")) {\n      this.eventEmitter.emit(\"message\", logLine.message);\n    }\n  }\n\n  // logId = 1\n  onInitEnv(/* lineSplit: string[] */) {\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onInitEnv`\n      });\n    }\n\n    if (this.isLive) {\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\n        if (this.debugLines) {\n          this.eventEmitter.emit(\"log\", {\n            type: \"debug\",\n            message: `Setting a reset timer`\n          });\n        }\n\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\n        this.eventEmitter.emit(\"message\", \"new-zone\");\n      }\n    } else {\n      this.splitEncounter();\n      this.eventEmitter.emit(\"message\", \"new-zone\");\n    }\n  }\n\n  // logId = 2\n  onPhaseTransition(lineSplit: string[]) {\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onPhaseTransition: ${logLine.phaseCode}`\n      });\n    }\n\n    if (this.isLive) {\n      this.eventEmitter.emit(\n        \"message\",\n        `phase-transition-${logLine.phaseCode}`\n      );\n\n      if (this.resetAfterPhaseTransition) {\n        this.phaseTransitionResetRequest = true;\n        this.phaseTransitionResetRequestTime = +new Date();\n      }\n    }\n\n    if (!this.isLive && this.splitOnPhaseTransition) {\n      this.splitEncounter();\n    }\n  }\n\n  // logId = 3\n  onNewPc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewPc(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      class: logLine.class,\n      isPlayer: true,\n      ...(logLine.gearScore &&\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 4\n  onNewNpc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewNpc(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isPlayer: false,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 5\n  onDeath(lineSplit: string[]) {\n    const logLine = new LogLines.LogDeath(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: true,\n      deathTime: logLine.timestamp.getTime()\n    });\n  }\n\n  // logId = 6\n  onSkillStart(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStart(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\n      });\n    }\n\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\n      this.healSources.push({\n        source: logLine.name,\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: false\n    });\n  }\n\n  // logId = 7\n  onSkillStage(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\n      });\n    }\n  }\n\n  // logId = 8\n  onDamage(lineSplit: string[]) {\n    if (lineSplit.length < 13) return;\n    const logLine = new LogLines.LogDamage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    if (\n      this.phaseTransitionResetRequest &&\n      this.phaseTransitionResetRequestTime > 0 &&\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\n    ) {\n      this.softReset();\n      this.phaseTransitionResetRequest = false;\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    this.updateEntity(logLine.targetName, {\n      name: logLine.targetName,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n\n    const damageOwner = this.game.entities[logLine.name];\n    const damageTarget = this.game.entities[logLine.targetName];\n\n    if (\n      !damageTarget.isPlayer &&\n      this.removeOverkillDamage &&\n      logLine.currentHp < 0\n    ) {\n      logLine.damage = logLine.damage + logLine.currentHp;\n    }\n\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\n        ...createEntitySkill(),\n        ...{ name: logLine.skillName }\n      };\n    }\n\n    // TODO: Not sure if this is fixed in the logger\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\n\n    // Remove 'sync' bleeds on G1 Valtan\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\n\n    const isCrit =\n      (logLine.damageModifier &\n        (HitFlag.HIT_FLAG_CRITICAL | HitFlag.HIT_FLAG_DOT_CRITICAL)) >\n      0;\n    const isBackAttack =\n      (logLine.damageModifier & HitFlag.HIT_OPTION_BACK_ATTACK) > 0;\n    const isFrontAttack =\n      (logLine.damageModifier & HitFlag.HIT_OPTION_FRONTAL_ATTACK) > 0;\n\n    const critCount = isCrit ? 1 : 0;\n    const backAttackCount = isBackAttack ? 1 : 0;\n    const frontAttackCount = isFrontAttack ? 1 : 0;\n\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\n      logLine.damage;\n    if (\n      logLine.damage >\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\n    )\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\n        logLine.damage;\n\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\n\n    if (logLine.skillName !== \"Bleed\") {\n      this.game.entities[logLine.name].hits.total += 1;\n      this.game.entities[logLine.name].hits.crit += critCount;\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\n\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.total += 1;\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\n        critCount;\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.backAttack += backAttackCount;\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.frontAttack += frontAttackCount;\n    }\n\n    if (damageOwner.isPlayer) {\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\n      this.game.damageStatistics.topDamageDealt = Math.max(\n        this.game.damageStatistics.topDamageDealt,\n        damageOwner.damageDealt\n      );\n      this.game.damageStatistics.targetMaximumHealth = logLine.maxHp;\n      this.game.damageStatistics.targetCurrentHealth = logLine.currentHp;\n    }\n\n    if (damageTarget.isPlayer) {\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\n      this.game.damageStatistics.topDamageTaken = Math.max(\n        this.game.damageStatistics.topDamageTaken,\n        damageTarget.damageTaken\n      );\n    }\n\n    if (this.game.fightStartedOn === 0)\n      this.game.fightStartedOn = +logLine.timestamp;\n    this.game.lastCombatPacket = +logLine.timestamp;\n  }\n\n  // logId = 9\n  onHeal(lineSplit: string[]) {\n    const logLine = new LogLines.LogHeal(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\n      });\n    }\n\n    let sourceName = \"\";\n    for (const source of this.healSources) {\n      if (source.expires >= +logLine.timestamp) {\n        sourceName = source.source;\n        break;\n      }\n    }\n    if (!sourceName) return;\n\n    this.updateEntity(sourceName, {\n      name: sourceName\n    });\n\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\n\n    if (this.game.entities[sourceName].isPlayer) {\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\n      this.game.damageStatistics.topHealingDone = Math.max(\n        this.game.damageStatistics.topHealingDone,\n        this.game.entities[sourceName].healingDone\n      );\n    }\n  }\n\n  // logId = 10\n  onBuff(lineSplit: string[]) {\n    const logLine = new LogLines.LogBuff(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\n      });\n    }\n\n    if (logLine.shieldAmount && logLine.isNew) {\n      this.updateEntity(logLine.name, {\n        name: logLine.name\n      });\n\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\n\n      if (this.game.entities[logLine.name].isPlayer) {\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\n        this.game.damageStatistics.topShieldDone = Math.max(\n          this.game.damageStatistics.topShieldDone,\n          this.game.entities[logLine.name].shieldDone\n        );\n      }\n    }\n  }\n\n  // logId = 11\n  onCounterattack(lineSplit: string[]) {\n    const logLine = new LogLines.LogCounterattack(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    // TODO: Add skill name from logger\n    this.game.entities[logLine.name].hits.counter += 1;\n  }\n}\n","import dayjs from \"dayjs\";\nimport { LogParser } from \"./parser.js\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport fs from \"fs\";\nimport path from \"path\";\n\nimport customParseFormat from \"dayjs/plugin/customParseFormat.js\";\ndayjs.extend(customParseFormat);\n\nexport default function fileParserWorker(\n  filename: string,\n  splitOnPhaseTransition: boolean,\n  mainFolder: string,\n  parsedLogFolder: string,\n  callback: CallableFunction\n) {\n  try {\n    const filenameSlice = filename.slice(0, -4);\n    const jsonName = filenameSlice + \".json\";\n\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\n    if (!contents) return callback(null, \"empty log\");\n\n    const logParser = new LogParser(false);\n    if (splitOnPhaseTransition === true)\n      logParser.splitOnPhaseTransition = true;\n\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\n    for (const line of lines) {\n      logParser.parseLogLine(line);\n    }\n    logParser.splitEncounter();\n\n    const encounters = logParser.encounters;\n\n    if (encounters.length > 0) {\n      const masterLog = { encounters: [] };\n\n      for (const encounter of encounters) {\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\n\n        if (duration <= 1000) continue;\n\n        let mostDamageTakenEntity = {\n          name: \"\",\n          damageTaken: 0,\n          isPlayer: false\n        };\n\n        for (const i of Object.values(encounter.entities)) {\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\n            mostDamageTakenEntity = {\n              name: i.name,\n              damageTaken: i.damageTaken,\n              isPlayer: i.isPlayer\n            };\n          }\n        }\n\n        const encounterDetails = {\n          duration,\n          mostDamageTakenEntity\n        };\n\n        const encounterId = uuidv4();\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\n        masterLog.encounters.push({\n          encounterId,\n          encounterFile,\n          ...encounterDetails\n        });\n\n        fs.writeFileSync(\n          path.join(parsedLogFolder, encounterFile),\n          JSON.stringify({\n            ...encounter,\n            ...encounterDetails\n          })\n        );\n      }\n\n      fs.writeFileSync(\n        path.join(parsedLogFolder, jsonName),\n        JSON.stringify(masterLog)\n      );\n\n      return callback(null, \"log parsed\");\n    }\n\n    return callback(null, \"no encounters found\");\n  } catch (e) {\n    return callback(e, \"log parser error\");\n  }\n}\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","LogLine","constructor","lineSplit","this","timestamp","Date","super","message","LogPhaseTransition","phaseCode","LogNewPc","id","name","classId","class","gearScore","currentHp","maxHp","LogNewNpc","LogDeath","killerId","killerName","skillId","skillName","LogSkillStage","skillStage","LogDamage","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","healAmount","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","healingSkills","duration","Demonize","HitFlag","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","EventEmitter","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","targetMaximumHealth","targetCurrentHealth","softReset","entitiesCopy","cloneDeep","Object","keys","entity","lastUpdate","updateEntity","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","updateTime","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","LogLines.LogMessage","logLine","startsWith","setTimeout","LogLines","LogLines.LogDeath","getTime","includes","source","expires","LogLines.LogSkillStage","damageOwner","damageTarget","totalDamage","maxDamage","critCount","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","backAttackCount","HIT_OPTION_BACK_ATTACK","frontAttackCount","HIT_OPTION_FRONTAL_ATTACK","Math","max","LogLines.LogHeal","LogLines.LogCounterattack","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","slice","jsonName","filenameSlice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","encounter","mostDamageTakenEntity","i","encounterId","uuidv4","encounterFile","masterLog","encounterDetails","writeFileSync","JSON","stringify","dayjs","extend","customParseFormat"],"mappings":"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"}