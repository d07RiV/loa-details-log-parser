{"version":3,"file":"file-parser-worker.modern.js","sources":["../node_modules/events/events.js","../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","export function tryParseInt(intString: string, defaultValue = 0, radix = 10, float = false) {\n  if (typeof intString === \"number\") {\n    if (isNaN(intString)) return defaultValue;\n    return intString;\n  }\n\n  let intNum: number;\n\n  try {\n    intNum = float ? parseFloat(intString) : parseInt(intString, radix);\n    if (isNaN(intNum)) intNum = defaultValue;\n  } catch {\n    intNum = defaultValue;\n  }\n\n  return intNum;\n}\n","import { tryParseInt } from \"./util\";\n\nclass LogLine {\n  lineSplit: string[];\n  timestamp: Date;\n\n  constructor(lineSplit: string[]) {\n    this.lineSplit = lineSplit;\n    this.timestamp = new Date(this.lineSplit[1]);\n  }\n}\n\n// logId = 0\nexport class LogMessage extends LogLine {\n  message: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.message = this.lineSplit[2];\n  }\n}\n\n// logId = 1\nexport class LogInitEnv extends LogLine {\n  playerId: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.playerId = lineSplit[2];\n  }\n}\n\n// logId = 2\nexport class LogPhaseTransition extends LogLine {\n  phaseCode: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.phaseCode = tryParseInt(lineSplit[2]);\n  }\n}\n\n// logId = 3\nexport class LogNewPc extends LogLine {\n  id: string;\n  name: string;\n  classId: number;\n  class: string;\n  gearScore: number;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.classId = tryParseInt(lineSplit[4]);\n    this.class = lineSplit[5] || \"UnknownClass\";\n    /* this.level = tryParseInt(lineSplit[6]); */\n    this.gearScore = tryParseInt(lineSplit[7], 0, 10, true);\n    this.currentHp = tryParseInt(lineSplit[8]);\n    this.maxHp = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 4\nexport class LogNewNpc extends LogLine {\n  id: string;\n  npcId: number;\n  name: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.npcId = tryParseInt(lineSplit[3]);\n    this.name = lineSplit[4] || \"Unknown Entity\";\n    this.currentHp = tryParseInt(lineSplit[5]);\n    this.maxHp = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 5\nexport class LogDeath extends LogLine {\n  id: string;\n  name: string;\n  killerId: string;\n  killerName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.killerId = lineSplit[4];\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\n  }\n}\n\n// logId = 6\nexport class LogSkillStart extends LogLine {\n  id: string;\n  name: string;\n  skillId: number;\n  skillName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = tryParseInt(lineSplit[4]);\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n  }\n}\n\n// logId = 7\nexport class LogSkillStage extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n  skillStage: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillStage = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 8\nexport class LogDamage extends LogLine {\n  id: string;\n  name: string;\n  skillId: number;\n  skillName: string;\n  skillEffectId: number;\n  skillEffect: string;\n  targetId: string;\n  targetName: string;\n  damage: number;\n  damageModifier: number;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = tryParseInt(lineSplit[4]);\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillEffectId = tryParseInt(lineSplit[6]);\n    this.skillEffect = lineSplit[7];\n    this.targetId = lineSplit[8];\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\n    this.damage = tryParseInt(lineSplit[10]);\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\n    this.currentHp = tryParseInt(lineSplit[12]);\n    this.maxHp = tryParseInt(lineSplit[13]);\n  }\n}\n\n// logId = 9\nexport class LogHeal extends LogLine {\n  id: string;\n  name: string;\n  healAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.healAmount = tryParseInt(lineSplit[4]);\n    //this.currentHp = tryParseInt(lineSplit[5]);\n  }\n}\n\n// logId = 10\nexport class LogBuff extends LogLine {\n  id: string;\n  name: string;\n  buffId: string;\n  buffName: string;\n  isNew: boolean;\n  sourceId: string;\n  sourceName: string;\n  shieldAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.buffId = lineSplit[4];\n    this.buffName = lineSplit[5];\n    this.isNew = lineSplit[6] == \"1\";\n    this.sourceId = lineSplit[7];\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\n    this.shieldAmount = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 11\nexport class LogCounterattack extends LogLine {\n  id: string;\n  name: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    /* this.targetId = lineSplit[4];\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\n  }\n}\n","interface HealingSkills {\n  [key: string]: HealingSkillDetails;\n}\ninterface HealingSkillDetails {\n  duration: number;\n}\nexport const healingSkills: HealingSkills = {\n  \"Serenade of Salvation\": {\n    duration: 3\n  },\n  \"Holy Aura\": {\n    duration: 16 * 1000\n  },\n  \"Holy Protection\": {\n    duration: 7 * 1000\n  },\n  Demonize: {\n    duration: 1.5 * 1000\n  }\n};\n\nexport enum HitOption {\n  HIT_OPTION_NONE = -1,\n  HIT_OPTION_BACK_ATTACK = 0,\n  HIT_OPTION_FRONTAL_ATTACK = 1,\n  HIT_OPTION_FLANK_ATTACK = 2,\n  HIT_OPTION_MAX = 3,\n}\n\nexport enum HitFlag {\n  HIT_FLAG_NORMAL = 0,\n  HIT_FLAG_CRITICAL = 1,\n  HIT_FLAG_MISS = 2,\n  HIT_FLAG_INVINCIBLE = 3,\n  HIT_FLAG_DOT = 4,\n  HIT_FLAG_IMMUNE = 5,\n  HIT_FLAG_IMMUNE_SILENCED = 6,\n  HIT_FLAG_FONT_SILENCED = 7,\n  HIT_FLAG_DOT_CRITICAL = 8,\n  HIT_FLAG_DODGE = 9,\n  HIT_FLAG_REFLECT = 10,\n  HIT_FLAG_DAMAGE_SHARE = 11,\n  HIT_FLAG_DODGE_HIT = 12,\n  HIT_FLAG_MAX = 13,\n}\n","import { cloneDeep } from \"lodash\";\nimport { EventEmitter } from \"events\";\n\nimport * as LogLines from \"./log-lines\";\nimport { tryParseInt } from \"./util\";\nimport { healingSkills, HitFlag, HitOption } from \"./constants\";\n\ninterface Game {\n  startedOn: number;\n  lastCombatPacket: number;\n  fightStartedOn: number;\n  entities: { [name: string]: Entity };\n  damageStatistics: {\n    totalDamageDealt: number;\n    topDamageDealt: number;\n    totalDamageTaken: number;\n    topDamageTaken: number;\n    totalHealingDone: number;\n    topHealingDone: number;\n    totalShieldDone: number;\n    topShieldDone: number;\n  };\n}\ninterface HealSource {\n  source: string;\n  expires: number;\n}\n\ninterface Entity {\n  lastUpdate: number;\n  id: string;\n  npcId: number;\n  name: string;\n  class: string;\n  classId: number;\n  isPlayer: boolean;\n  isDead: boolean;\n  deaths: number;\n  deathTime: number;\n  gearScore: number;\n  currentHp: number;\n  maxHp: number;\n  damageDealt: number;\n  healingDone: number;\n  shieldDone: number;\n  damageTaken: number;\n  skills: { [name: string]: EntitySkills };\n  hits: Hits;\n}\n\ninterface Breakdown {\n  timestamp: number;\n  damage: number;\n  targetEntity: string;\n  isCrit: boolean;\n  isBackAttack: boolean;\n  isFrontAttack: boolean;\n}\n\ninterface EntitySkills {\n  id: number;\n  name: string;\n  totalDamage: number;\n  maxDamage: number;\n  hits: Hits;\n  breakdown: Breakdown[];\n}\n\nfunction createEntitySkill(): EntitySkills {\n  const newEntitySkill: EntitySkills = {\n    id: 0,\n    name: \"\",\n    totalDamage: 0,\n    maxDamage: 0,\n    hits: {\n      casts: 0,\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    },\n    breakdown: []\n  };\n  return newEntitySkill;\n}\n\ninterface Hits {\n  casts: number;\n  total: number;\n  crit: number;\n  backAttack: number;\n  frontAttack: number;\n  counter: number;\n}\nfunction createEntity(): Entity {\n  const newEntity: Entity = {\n    lastUpdate: 0,\n    id: \"\",\n    npcId: 0,\n    name: \"\",\n    class: \"\",\n    classId: 0,\n    isPlayer: false,\n    isDead: false,\n    deaths: 0,\n    deathTime: 0,\n    gearScore: 0,\n    currentHp: 0,\n    maxHp: 0,\n    damageDealt: 0,\n    healingDone: 0,\n    shieldDone: 0,\n    damageTaken: 0,\n    skills: {},\n    hits: {\n      casts: 0,\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntity;\n}\n\nexport class LogParser extends EventEmitter {\n  resetTimer: ReturnType<typeof setTimeout>;\n\n  debugLines: boolean;\n  isLive: boolean;\n  dontResetOnZoneChange: boolean;\n  resetAfterPhaseTransition: boolean;\n  splitOnPhaseTransition: boolean;\n  removeOverkillDamage: boolean;\n\n  phaseTransitionResetRequest: boolean;\n  phaseTransitionResetRequestTime: number;\n\n  game: Game;\n  encounters: Game[];\n  healSources: HealSource[];\n\n  constructor(isLive = false) {\n    super();\n\n    this.resetTimer = null;\n\n    this.debugLines = false;\n    this.isLive = isLive;\n    this.dontResetOnZoneChange = false;\n    this.resetAfterPhaseTransition = false;\n    this.splitOnPhaseTransition = false;\n    this.removeOverkillDamage = true;\n\n    this.phaseTransitionResetRequest = false;\n    this.phaseTransitionResetRequestTime = 0;\n\n    this.resetState();\n    this.encounters = [];\n\n    if (this.isLive) {\n      setInterval(this.broadcastStateChange.bind(this), 100);\n    }\n  }\n\n  resetState() {\n    if (this.debugLines)\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: \"Resetting state\"\n      });\n\n    const clone = cloneDeep(this.game);\n    const curTime = +new Date();\n\n    this.game = {\n      startedOn: curTime,\n      lastCombatPacket: curTime,\n      fightStartedOn: 0,\n      entities: {},\n      damageStatistics: {\n        totalDamageDealt: 0,\n        topDamageDealt: 0,\n        totalDamageTaken: 0,\n        topDamageTaken: 0,\n        totalHealingDone: 0,\n        topHealingDone: 0,\n        totalShieldDone: 0,\n        topShieldDone: 0,\n      }\n    };\n\n    this.healSources = [];\n    this.emit(\"reset-state\", clone);\n  }\n  softReset() {\n    this.resetTimer = null;\n    const entitiesCopy = cloneDeep(this.game.entities);\n    this.resetState();\n    for (const entity of Object.keys(entitiesCopy)) {\n      // don't keep entity if it hasn't been updated in 10 minutes\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\n        continue;\n\n      this.updateEntity(entitiesCopy[entity].name, {\n        name: entitiesCopy[entity].name,\n        npcId: entitiesCopy[entity].npcId,\n        class: entitiesCopy[entity].class,\n        classId: entitiesCopy[entity].classId,\n        isPlayer: entitiesCopy[entity].isPlayer,\n        gearScore: entitiesCopy[entity].gearScore,\n        maxHp: entitiesCopy[entity].maxHp,\n        currentHp: entitiesCopy[entity].currentHp\n      });\n    }\n  }\n  cancelReset() {\n    if (this.resetTimer) clearTimeout(this.resetTimer);\n    this.resetTimer = null;\n  }\n  splitEncounter() {\n    const curState = cloneDeep(this.game);\n    if (\n      curState.fightStartedOn != 0 && // no combat packets\n      (curState.damageStatistics.totalDamageDealt != 0 ||\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\n    )\n      this.encounters.push(curState);\n    this.resetState();\n  }\n\n  broadcastStateChange() {\n    const clone: Game = cloneDeep(this.game);\n    // Dont send breakdowns; will hang up UI\n    Object.values(clone.entities).forEach(entity => {\n      Object.values(entity.skills).forEach(skill => {\n        skill.breakdown = [];\n      })\n    })\n\n    this.emit(\"state-change\", clone);\n  }\n\n  parseLogLine(line: string) {\n    if (!line) return;\n\n    const lineSplit = line.trim().split(\"|\");\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\n\n    const logType = tryParseInt(lineSplit[0]);\n\n    try {\n      switch (logType) {\n        case 0:\n          this.onMessage(lineSplit);\n          break;\n        case 1:\n          this.onInitEnv(/* lineSplit */);\n          break;\n        case 2:\n          this.onPhaseTransition(lineSplit);\n          break;\n        case 3:\n          this.onNewPc(lineSplit);\n          break;\n        case 4:\n          this.onNewNpc(lineSplit);\n          break;\n        case 5:\n          this.onDeath(lineSplit);\n          break;\n        case 6:\n          this.onSkillStart(lineSplit);\n          break;\n        case 7:\n          this.onSkillStage(lineSplit);\n          break;\n        case 8:\n          this.onDamage(lineSplit);\n          break;\n        case 9:\n          this.onHeal(lineSplit);\n          break;\n        case 10:\n          this.onBuff(lineSplit);\n          break;\n        case 12:\n          this.onCounterattack(lineSplit);\n          break;\n      }\n    } catch (e) {\n      this.emit(\"log\", { type: \"error\", message: e });\n    }\n  }\n\n  updateEntity(entityName: string, values) {\n    const updateTime: {lastUpdate?: number} = {};\n    const prev = this.game.entities[entityName];\n    if (values.currentHp && (!prev || values.currentHp !== prev.currentHp)) {\n      updateTime.lastUpdate = +new Date();\n    }\n    if (!prev) {\n      this.game.entities[entityName] = {\n        ...createEntity(),\n        ...values,\n        ...updateTime\n      };\n    } else {\n      this.game.entities[entityName] = {\n        ...prev,\n        ...values,\n        ...updateTime\n      };\n    }\n  }\n\n  // logId = 0\n  onMessage(lineSplit: string[]) {\n    const logLine = new LogLines.LogMessage(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onMessage: ${logLine.message}`\n      });\n    }\n\n    if (!logLine.message.startsWith(\"Arguments:\")) {\n      this.emit(\"message\", logLine.message);\n    }\n  }\n\n  // logId = 1\n  onInitEnv(/* lineSplit: string[] */) {\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onInitEnv`\n      });\n    }\n\n    if (this.isLive) {\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\n        if (this.debugLines) {\n          this.emit(\"log\", {\n            type: \"debug\",\n            message: `Setting a reset timer`\n          });\n        }\n\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\n        this.emit(\"message\", \"new-zone\");\n      }\n    } else {\n      this.splitEncounter();\n      this.emit(\"message\", \"new-zone\");\n    }\n  }\n\n  // logId = 2\n  onPhaseTransition(lineSplit: string[]) {\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onPhaseTransition: ${logLine.phaseCode}`\n      });\n    }\n\n    if (this.isLive) {\n      this.emit(\n        \"message\",\n        `phase-transition-${logLine.phaseCode}`\n      );\n\n      if (this.resetAfterPhaseTransition) {\n        this.phaseTransitionResetRequest = true;\n        this.phaseTransitionResetRequestTime = +new Date();\n      }\n    }\n\n    if (!this.isLive && this.splitOnPhaseTransition) {\n      this.splitEncounter();\n    }\n  }\n\n  // logId = 3\n  onNewPc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewPc(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      id: logLine.id,\n      name: logLine.name,\n      class: logLine.class,\n      classId: logLine.classId,\n      isPlayer: true,\n      ...(logLine.gearScore &&\n        logLine.gearScore != 0 && { gearScore: logLine.gearScore }),\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 4\n  onNewNpc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewNpc(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      id: logLine.id,\n      name: logLine.name,\n      npcId: logLine.npcId,\n      isPlayer: false,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 5\n  onDeath(lineSplit: string[]) {\n    const logLine = new LogLines.LogDeath(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\n      });\n    }\n\n    const entity = this.game.entities[logLine.name];\n\n    let deaths = 0;\n    if (!entity) deaths = 1;\n    else if (entity.isDead) deaths = entity.deaths;\n    else deaths = entity.deaths + 1;\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: true,\n      deathTime: +logLine.timestamp,\n      deaths,\n    });\n  }\n\n  // logId = 6\n  onSkillStart(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStart(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\n      });\n    }\n\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\n      this.healSources.push({\n        source: logLine.name,\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: false\n    });\n\n    const entity = this.game.entities[logLine.name];\n    if (entity) {\n      entity.hits.casts += 1;\n\n      if (!(logLine.skillName in entity.skills)) {\n        entity.skills[logLine.skillName] = {\n          ...createEntitySkill(),\n          ...{ id: logLine.skillId, name: logLine.skillName }\n        };\n        entity.skills[logLine.skillName].hits.casts += 1;\n      }\n    }\n  }\n\n  // logId = 7\n  onSkillStage(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStage(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\n      });\n    }\n  }\n\n  // logId = 8\n  onDamage(lineSplit: string[]) {\n    if (lineSplit.length < 13) return;\n    const logLine = new LogLines.LogDamage(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    if (\n      this.phaseTransitionResetRequest &&\n      this.phaseTransitionResetRequestTime > 0 &&\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\n    ) {\n      this.softReset();\n      this.phaseTransitionResetRequest = false;\n    }\n\n    this.updateEntity(logLine.name, {\n      id: logLine.id,\n      name: logLine.name\n    });\n\n    this.updateEntity(logLine.targetName, {\n      id: logLine.targetId,\n      name: logLine.targetName,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n\n    const damageOwner = this.game.entities[logLine.name];\n    const damageTarget = this.game.entities[logLine.targetName];\n\n    if (\n      !damageTarget.isPlayer &&\n      this.removeOverkillDamage &&\n      logLine.currentHp < 0\n    ) {\n      logLine.damage = logLine.damage + logLine.currentHp;\n    }\n\n    if (logLine.skillId === 0 && logLine.skillEffectId !== 0) {\n        logLine.skillId = logLine.skillEffectId;\n        logLine.skillName = logLine.skillEffect;\n    }\n\n    if (!(logLine.skillName in damageOwner.skills)) {\n      damageOwner.skills[logLine.skillName] = {\n        ...createEntitySkill(),\n        ...{ id: logLine.skillId, name: logLine.skillName }\n      };\n    }\n\n    const hitFlag: HitFlag = logLine.damageModifier & 0xf;\n    const hitOption: HitOption = ((logLine.damageModifier >> 4) & 0x7) - 1;\n\n    // TODO: Keeping for now; Not sure if referring to damage share on Valtan G1 or something else\n    // TODO: Not sure if this is fixed in the logger\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\n\n    // Remove 'sync' bleeds on G1 Valtan\n    if (logLine.skillName === \"Bleed\" && hitFlag === HitFlag.HIT_FLAG_DAMAGE_SHARE) return;\n\n    const isCrit =\n      hitFlag === HitFlag.HIT_FLAG_CRITICAL ||\n      hitFlag === HitFlag.HIT_FLAG_DOT_CRITICAL;\n    const isBackAttack = hitOption === HitOption.HIT_OPTION_BACK_ATTACK;\n    const isFrontAttack = hitOption === HitOption.HIT_OPTION_FRONTAL_ATTACK;\n\n    const critCount = isCrit ? 1 : 0;\n    const backAttackCount = isBackAttack ? 1 : 0;\n    const frontAttackCount = isFrontAttack ? 1 : 0;\n\n    damageOwner.skills[logLine.skillName].totalDamage +=\n      logLine.damage;\n    if (\n      logLine.damage >\n      damageOwner.skills[logLine.skillName].maxDamage\n    )\n      damageOwner.skills[logLine.skillName].maxDamage =\n        logLine.damage;\n\n    damageOwner.damageDealt += logLine.damage;\n    damageTarget.damageTaken += logLine.damage;\n\n    if (logLine.skillName !== \"Bleed\") {\n      damageOwner.hits.total += 1;\n      damageOwner.hits.crit += critCount;\n      damageOwner.hits.backAttack += backAttackCount;\n      damageOwner.hits.frontAttack += frontAttackCount;\n\n      damageOwner.skills[logLine.skillName].hits.total += 1;\n      damageOwner.skills[logLine.skillName].hits.crit += critCount;\n      damageOwner.skills[logLine.skillName].hits.backAttack += backAttackCount;\n      damageOwner.skills[logLine.skillName].hits.frontAttack += frontAttackCount;\n    }\n\n    if (damageOwner.isPlayer) {\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\n      this.game.damageStatistics.topDamageDealt = Math.max(\n        this.game.damageStatistics.topDamageDealt,\n        damageOwner.damageDealt\n      );\n\n      const breakdown: Breakdown = {\n        timestamp: +logLine.timestamp,\n        damage: logLine.damage,\n        targetEntity: damageTarget.id,\n        isCrit,\n        isBackAttack,\n        isFrontAttack,\n      }\n\n      damageOwner.skills[logLine.skillName].breakdown.push(breakdown);\n    }\n\n    if (damageTarget.isPlayer) {\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\n      this.game.damageStatistics.topDamageTaken = Math.max(\n        this.game.damageStatistics.topDamageTaken,\n        damageTarget.damageTaken\n      );\n    }\n\n    if (this.game.fightStartedOn === 0)\n      this.game.fightStartedOn = +logLine.timestamp;\n    this.game.lastCombatPacket = +logLine.timestamp;\n  }\n\n  // logId = 9\n  onHeal(lineSplit: string[]) {\n    const logLine = new LogLines.LogHeal(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\n      });\n    }\n\n    let sourceName = \"\";\n    for (const source of this.healSources) {\n      if (source.expires >= +logLine.timestamp) {\n        sourceName = source.source;\n        break;\n      }\n    }\n    if (!sourceName) return;\n\n    this.updateEntity(sourceName, {\n      name: sourceName\n    });\n\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\n\n    if (this.game.entities[sourceName].isPlayer) {\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\n      this.game.damageStatistics.topHealingDone = Math.max(\n        this.game.damageStatistics.topHealingDone,\n        this.game.entities[sourceName].healingDone\n      );\n    }\n  }\n\n  // logId = 10\n  onBuff(lineSplit: string[]) {\n    const logLine = new LogLines.LogBuff(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\n      });\n    }\n\n    if (logLine.shieldAmount && logLine.isNew) {\n      this.updateEntity(logLine.name, {\n        name: logLine.name\n      });\n\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\n\n      if (this.game.entities[logLine.name].isPlayer) {\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\n        this.game.damageStatistics.topShieldDone = Math.max(\n          this.game.damageStatistics.topShieldDone,\n          this.game.entities[logLine.name].shieldDone\n        );\n      }\n    }\n  }\n\n  // logId = 12\n  onCounterattack(lineSplit: string[]) {\n    const logLine = new LogLines.LogCounterattack(lineSplit);\n\n    if (this.debugLines) {\n      this.emit(\"log\", {\n        type: \"debug\",\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    // TODO: Add skill name from logger\n    this.game.entities[logLine.name].hits.counter += 1;\n  }\n}\n","import dayjs from \"dayjs\";\nimport { LogParser } from \"./parser\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport fs from \"fs\";\nimport path from \"path\";\n\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\ndayjs.extend(customParseFormat);\n\nexport default function fileParserWorker(\n  filename: string,\n  splitOnPhaseTransition: boolean,\n  mainFolder: string,\n  parsedLogFolder: string,\n  callback: CallableFunction\n) {\n  try {\n    const filenameSlice = filename.slice(0, -4);\n    const jsonName = filenameSlice + \".json\";\n\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\n    if (!contents) return callback(null, \"empty log\");\n\n    const logParser = new LogParser(false);\n    if (splitOnPhaseTransition === true)\n      logParser.splitOnPhaseTransition = true;\n\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\n    for (const line of lines) {\n      logParser.parseLogLine(line);\n    }\n    logParser.splitEncounter();\n\n    const encounters = logParser.encounters;\n\n    if (encounters.length > 0) {\n      const masterLog = { encounters: [] };\n\n      for (const encounter of encounters) {\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\n\n        if (duration <= 1000) continue;\n\n        let mostDamageTakenEntity = {\n          name: \"\",\n          damageTaken: 0,\n          isPlayer: false\n        };\n\n        for (const i of Object.values(encounter.entities)) {\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\n            mostDamageTakenEntity = {\n              name: i.name,\n              damageTaken: i.damageTaken,\n              isPlayer: i.isPlayer\n            };\n          }\n        }\n\n        const encounterDetails = {\n          duration,\n          mostDamageTakenEntity\n        };\n\n        const encounterId = uuidv4();\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\n        masterLog.encounters.push({\n          encounterId,\n          encounterFile,\n          ...encounterDetails\n        });\n\n        fs.writeFileSync(\n          path.join(parsedLogFolder, encounterFile),\n          JSON.stringify({\n            ...encounter,\n            ...encounterDetails\n          })\n        );\n      }\n\n      fs.writeFileSync(\n        path.join(parsedLogFolder, jsonName),\n        JSON.stringify(masterLog)\n      );\n\n      return callback(null, \"log parsed\");\n    }\n\n    return callback(null, \"no encounters found\");\n  } catch (e) {\n    return callback(e, \"log parser error\");\n  }\n}\n"],"names":["ReflectOwnKeys","R","Reflect","ReflectApply","apply","target","receiver","args","Function","prototype","call","ownKeys","Object","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","value","EventEmitter","init","this","events","_events","undefined","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","type","prepend","m","existing","create","newListener","emit","unshift","push","length","warned","w","Error","String","name","emitter","count","console","warn","onceWrapper","fired","removeListener","wrapFn","arguments","_onceWrap","state","wrapped","bind","_listeners","unwrap","evlistener","arr","ret","Array","i","unwrapListeners","arrayClone","listenerCount","n","copy","eventTargetAgnosticAddListener","flags","on","once","addEventListener","wrapListener","arg","removeEventListener","tryParseInt","intString","defaultValue","radix","float","intNum","parseFloat","parseInt","_unused","defineProperty","enumerable","get","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","error","er","err","message","context","handler","len","listeners","addListener","prependListener","prependOnceListener","off","list","position","originalListener","shift","index","pop","spliceOne","removeAllListeners","key","keys","rawListeners","eventNames","Promise","resolve","reject","errorListener","resolver","slice","addErrorHandlerIfEventEmitter","LogLine","constructor","lineSplit","timestamp","Date","super","LogPhaseTransition","phaseCode","LogNewPc","id","classId","class","gearScore","currentHp","maxHp","LogNewNpc","npcId","LogDeath","killerId","killerName","LogSkillStart","skillId","skillName","skillStage","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","healAmount","LogBuff","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","healingSkills","duration","Demonize","HitOption","HitFlag","isLive","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","resetState","setInterval","broadcastStateChange","cloneDeep","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","clone","softReset","entitiesCopy","entity","lastUpdate","updateEntity","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","values","forEach","skills","skill","breakdown","parseLogLine","line","trim","split","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","updateTime","prev","_extends","isDead","deaths","deathTime","damageDealt","healingDone","shieldDone","damageTaken","hits","casts","total","crit","backAttack","frontAttack","counter","logLine","startsWith","setTimeout","LogLines.LogNewPc","LogLines.LogNewNpc","LogLines.LogDeath","LogLines.LogSkillStart","includes","source","expires","totalDamage","maxDamage","LogLines.LogDamage","damageOwner","damageTarget","hitFlag","hitOption","HIT_FLAG_DAMAGE_SHARE","isCrit","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","isBackAttack","HIT_OPTION_BACK_ATTACK","HIT_OPTION_FRONTAL_ATTACK","backAttackCount","frontAttackCount","isFrontAttack","critCount","Math","max","targetEntity","LogLines.LogBuff","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","jsonName","filenameSlice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","encounter","mostDamageTakenEntity","encounterId","uuidv4","encounterFile","masterLog","encounterDetails","writeFileSync","JSON","stringify","dayjs","extend","customParseFormat"],"mappings":"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"}